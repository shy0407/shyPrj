<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.pocket.persistence.mapper.DataMapper">

<!-- age전체평균 -->
<select resultType="DataDTO" id="getAgeAvg">
SELECT FOODS, ALCOHOL_CIGARETTE,CLOTHES, UTILITY_BILL,HOUSEWARES, HEALTH, TRANSPORTATION, TELEPHONE,ENTERTAINMENT, EDUCATION,TRAVEL, ETC, NON_CON_EXPENDITURE
FROM aws.DATA
WHERE DATA_SEQ='1'
</select>

<!-- age39세 이하 -->
<select resultType="DataDTO" id="getAgeThirty">
SELECT FOODS, ALCOHOL_CIGARETTE,CLOTHES, UTILITY_BILL,HOUSEWARES, HEALTH, TRANSPORTATION, TELEPHONE,ENTERTAINMENT, EDUCATION,TRAVEL, ETC, NON_CON_EXPENDITURE
FROM aws.DATA
WHERE DATA_SEQ='2'
</select>

<!-- 40대 -->
<select resultType="DataDTO" id="getAgeForty">
SELECT FOODS, ALCOHOL_CIGARETTE,CLOTHES, UTILITY_BILL,HOUSEWARES, HEALTH, TRANSPORTATION, TELEPHONE,ENTERTAINMENT, EDUCATION,TRAVEL, ETC, NON_CON_EXPENDITURE
FROM aws.DATA
WHERE DATA_SEQ='3'
</select>

<!-- 50대 -->
<select resultType="DataDTO" id="getAgeFiFty">
SELECT FOODS, ALCOHOL_CIGARETTE,CLOTHES, UTILITY_BILL,HOUSEWARES, HEALTH, TRANSPORTATION, TELEPHONE,ENTERTAINMENT, EDUCATION,TRAVEL, ETC, NON_CON_EXPENDITURE
FROM aws.DATA
WHERE DATA_SEQ='4'
</select>

<!-- 60세이상 -->
<select resultType="DataDTO" id="getAgeSixty">
SELECT FOODS, ALCOHOL_CIGARETTE,CLOTHES, UTILITY_BILL,HOUSEWARES, HEALTH, TRANSPORTATION, TELEPHONE,ENTERTAINMENT, EDUCATION,TRAVEL, ETC, NON_CON_EXPENDITURE
FROM aws.DATA
WHERE DATA_SEQ='5'
</select>

<!-- 월 별 가입자 수 -->
<select id="joinCount" resultType="java.util.HashMap">
select substring(REG_DT, 6,2) as month, count(*) as count from aws.USER_INFO group by month
</select>



<!-- 성별에 따른 월별 가입자수 -->
<select id="genderCountByMonth" resultType="java.util.HashMap">
<!-- select 
substring(REG_DT, 6,2) as month, 
GENDER as gender,
count(*) as count
from aws.USER_INFO group by month, GENDER -->

select 
count(case when substring(REG_DT, 6, 2)=1 and GENDER ='M' then 1 end)as JanM,
count(case when substring(REG_DT, 6, 2)=1 and GENDER ='F' then 1 end)as JanF,
count(case when substring(REG_DT, 6, 2)=2 and GENDER ='M' then 1 end)as FebM,
count(case when substring(REG_DT, 6, 2)=3 and GENDER ='F' then 1 end)as FebF,
count(case when substring(REG_DT, 6, 2)=3 and GENDER ='M' then 1 end)as MarM,
count(case when substring(REG_DT, 6, 2)=3 and GENDER ='F' then 1 end)as MarF,
count(case when substring(REG_DT, 6, 2)=4 and GENDER ='M' then 1 end)as ApiM,
count(case when substring(REG_DT, 6, 2)=4 and GENDER ='F' then 1 end)as ApiF,
count(case when substring(REG_DT, 6, 2)=5 and GENDER ='M' then 1 end)as MayM,
count(case when substring(REG_DT, 6, 2)=5 and GENDER ='F' then 1 end)as MayF,
count(case when substring(REG_DT, 6, 2)=6 and GENDER ='M' then 1 end)as JunM,
count(case when substring(REG_DT, 6, 2)=6 and GENDER ='F' then 1 end)as JunF,
count(case when substring(REG_DT, 6, 2)=7 and GENDER ='M' then 1 end)as JulM,
count(case when substring(REG_DT, 6, 2)=7 and GENDER ='F' then 1 end)as JulF,
count(case when substring(REG_DT, 6, 2)=8 and GENDER ='M' then 1 end)as AugM,
count(case when substring(REG_DT, 6, 2)=8 and GENDER ='F' then 1 end)as AugF,
count(case when substring(REG_DT, 6, 2)=9 and GENDER ='M' then 1 end)as SepM,
count(case when substring(REG_DT, 6, 2)=9 and GENDER ='F' then 1 end)as SepF,
count(case when substring(REG_DT, 6, 2)=10 and GENDER ='M' then 1 end)as OctM,
count(case when substring(REG_DT, 6, 2)=10 and GENDER ='F' then 1 end)as OctF,
count(case when substring(REG_DT, 6, 2)=11 and GENDER ='M' then 1 end)as NovM,
count(case when substring(REG_DT, 6, 2)=11 and GENDER ='F' then 1 end)as NovF,
count(case when substring(REG_DT, 6, 2)=12 and GENDER ='M' then 1 end)as DecM,
count(case when substring(REG_DT, 6, 2)=12 and GENDER ='F' then 1 end)as DecF,
count(case when substring(REG_DT, 6, 2)=1 then 1 end)as Jan,
count(case when substring(REG_DT, 6, 2)=2 then 1 end)as Feb,
count(case when substring(REG_DT, 6, 2)=3 then 1 end)as Mar,
count(case when substring(REG_DT, 6, 2)=4 then 1 end)as Api,
count(case when substring(REG_DT, 6, 2)=5 then 1 end)as May,
count(case when substring(REG_DT, 6, 2)=6 then 1 end)as Jun,
count(case when substring(REG_DT, 6, 2)=7 then 1 end)as Jul,
count(case when substring(REG_DT, 6, 2)=8 then 1 end)as Aug,
count(case when substring(REG_DT, 6, 2)=9 then 1 end)as Sep,
count(case when substring(REG_DT, 6, 2)=10 then 1 end)as Oct,
count(case when substring(REG_DT, 6, 2)=11 then 1 end)as Nov,
count(case when substring(REG_DT, 6, 2)=12 then 1 end)as DecM
from aws.USER_INFO

</select>

<!--수입별 가입자 수 -->
<select id="incomeCount" resultType="java.util.HashMap">
select INCOME , count(*) as COUNT from aws.USER_INFO group by INCOME
</select>

<!-- 업종별 가입자 수 -->
<select id="jobCount" resultType="java.util.HashMap">
<!-- select JOB , count(*) as COUNT from aws.USER_INFO group by JOB -->
select
count(case when a.job='build' then 1 end) as build,
count(case when a.job='design' then 1 end) as design,
count(case when a.job='education' then 1 end) as education,
count(case when a.job='it' then 1 end) as it,
count(case when a.job='management' then 1 end) as management,
count(case when a.job='manufacture' then 1 end) as manufacture,
count(case when a.job='medical' then 1 end) as medical,
count(case when a.job='pro' then 1 end) as pro,
count(case when a.job='sales' then 1 end) as sales,
count(case when a.job='service' then 1 end) as service,
count(case when a.job='student' then 1 end) as student,
count(case when a.job='trade' then 1 end) as trade
from aws.USER_INFO a
</select>

<!-- 요일별 가입자 수 -->
<select id="dayCount" resultType="java.util.HashMap">
select CASE WHEN DAYOFWEEK(STR_TO_DATE(REG_DT, '%Y-%m-%d'))=1 THEN '일'
WHEN DAYOFWEEK(STR_TO_DATE(REG_DT, '%Y-%m-%d'))=2 THEN '월'
WHEN DAYOFWEEK(STR_TO_DATE(REG_DT, '%Y-%m-%d'))=3 THEN '화'
WHEN DAYOFWEEK(STR_TO_DATE(REG_DT, '%Y-%m-%d'))=4 THEN '수'
WHEN DAYOFWEEK(STR_TO_DATE(REG_DT, '%Y-%m-%d'))=5 THEN '목'
WHEN DAYOFWEEK(STR_TO_DATE(REG_DT, '%Y-%m-%d'))=6 THEN '금'
WHEN DAYOFWEEK(STR_TO_DATE(REG_DT, '%Y-%m-%d'))=7 THEN '토'
ELSE '오류' END WEEK_NAME,
count(*) as COUNT
from aws.USER_INFO
group by DAYOFWEEK(STR_TO_DATE(REG_DT, '%Y-%m-%d'))
</select>

<!-- 성별, 수입에 따른 카운드 -->
<select id="incomeGenderCount" resultType="java.util.HashMap">
select INCOME,GENDER, count(1) as COUNT from aws.USER_INFO group by INCOME,GENDER
</select>

<!-- 전체 회원수 가져오기 -->
<select id="countAll" resultType="TestDTO">
select count(1) as count from aws.USER_INFO
</select>

<select id="userAnalysis" resultType="java.util.HashMap">
SELECT  
COUNT(CASE WHEN A.GENDER = 'F' THEN 1 END) AS FEMALE,
COUNT(CASE WHEN A.GENDER = 'M' THEN 1 END) AS MALE,
COUNT(1) AS ALL_USER
FROM aws.USER_INFO A
</select>

<select id="incomeByGender" resultType="java.util.HashMap">
<!-- select GENDER as gender , count(*) as count from aws.USER_INFO group by gender -->
select count(1),
	(select count(1) from aws.USER_INFO where INCOME='100' and GENDER='F') as 100F,
	(select count(1) from aws.USER_INFO where INCOME='100' and GENDER='M') as 100M,
	(select count(1) from aws.USER_INFO where INCOME='200' and GENDER='F') as 200F,
	(select count(1) from aws.USER_INFO where INCOME='200' and GENDER='M') as 200M,
	(select count(1) from aws.USER_INFO where INCOME='300' and GENDER='F') as 300F,
	(select count(1) from aws.USER_INFO where INCOME='300' and GENDER='M') as 300M,
	(select count(1) from aws.USER_INFO where INCOME='400' and GENDER='F') as 400F,
	(select count(1) from aws.USER_INFO where INCOME='400' and GENDER='M') as 400M,
	(select count(1) from aws.USER_INFO where INCOME='500' and GENDER='F') as 500F,
	(select count(1) from aws.USER_INFO where INCOME='500' and GENDER='M') as 500M,
	(select count(1) from aws.USER_INFO where INCOME='600' and GENDER='F') as 600F,
	(select count(1) from aws.USER_INFO where INCOME='600' and GENDER='M') as 600M,
	(select count(1) from aws.USER_INFO where INCOME='700' and GENDER='F') as 700F,
	(select count(1) from aws.USER_INFO where INCOME='700' and GENDER='M') as 700M
from aws.USER_INFO
</select>

<select id="allData" resultType="java.util.HashMap">
select
count(case when DAYOFWEEK(STR_TO_DATE(REG_DT, '%Y-%m-%d'))=1 then 1 end) as sun,
count(case when DAYOFWEEK(STR_TO_DATE(REG_DT, '%Y-%m-%d'))=2 then 1 end) as mon,
count(case when DAYOFWEEK(STR_TO_DATE(REG_DT, '%Y-%m-%d'))=3 then 1 end) as tue,
count(case when DAYOFWEEK(STR_TO_DATE(REG_DT, '%Y-%m-%d'))=4 then 1 end) as wed,
count(case when DAYOFWEEK(STR_TO_DATE(REG_DT, '%Y-%m-%d'))=5 then 1 end) as thur,
count(case when DAYOFWEEK(STR_TO_DATE(REG_DT, '%Y-%m-%d'))=6 then 1 end) as fri,
count(case when DAYOFWEEK(STR_TO_DATE(REG_DT, '%Y-%m-%d'))=7 then 1 end) as sat,
count(case when substring(REG_DT, 6, 2)=1 and GENDER ='M' then 1 end)as JanM,
count(case when substring(REG_DT, 6, 2)=1 and GENDER ='F' then 1 end)as JanF,
count(case when substring(REG_DT, 6, 2)=2 and GENDER ='M' then 1 end)as FebM,
count(case when substring(REG_DT, 6, 2)=3 and GENDER ='F' then 1 end)as FebF,
count(case when substring(REG_DT, 6, 2)=3 and GENDER ='M' then 1 end)as MarM,
count(case when substring(REG_DT, 6, 2)=3 and GENDER ='F' then 1 end)as MarF,
count(case when substring(REG_DT, 6, 2)=4 and GENDER ='M' then 1 end)as ApiM,
count(case when substring(REG_DT, 6, 2)=4 and GENDER ='F' then 1 end)as ApiF,
count(case when substring(REG_DT, 6, 2)=5 and GENDER ='M' then 1 end)as MayM,
count(case when substring(REG_DT, 6, 2)=5 and GENDER ='F' then 1 end)as MayF,
count(case when substring(REG_DT, 6, 2)=6 and GENDER ='M' then 1 end)as JunM,
count(case when substring(REG_DT, 6, 2)=6 and GENDER ='F' then 1 end)as JunF,
count(case when substring(REG_DT, 6, 2)=7 and GENDER ='M' then 1 end)as JulM,
count(case when substring(REG_DT, 6, 2)=7 and GENDER ='F' then 1 end)as JulF,
count(case when substring(REG_DT, 6, 2)=8 and GENDER ='M' then 1 end)as AugM,
count(case when substring(REG_DT, 6, 2)=8 and GENDER ='F' then 1 end)as AugF,
count(case when substring(REG_DT, 6, 2)=9 and GENDER ='M' then 1 end)as SepM,
count(case when substring(REG_DT, 6, 2)=9 and GENDER ='F' then 1 end)as SepF,
count(case when substring(REG_DT, 6, 2)=10 and GENDER ='M' then 1 end)as OctM,
count(case when substring(REG_DT, 6, 2)=10 and GENDER ='F' then 1 end)as OctF,
count(case when substring(REG_DT, 6, 2)=11 and GENDER ='M' then 1 end)as NovM,
count(case when substring(REG_DT, 6, 2)=11 and GENDER ='F' then 1 end)as NovF,
count(case when substring(REG_DT, 6, 2)=12 and GENDER ='M' then 1 end)as DecM,
count(case when substring(REG_DT, 6, 2)=12 and GENDER ='F' then 1 end)as DecF,
count(case when substring(REG_DT, 6, 2)=1 then 1 end)as Jan,
count(case when substring(REG_DT, 6, 2)=2 then 1 end)as Feb,
count(case when substring(REG_DT, 6, 2)=3 then 1 end)as Mar,
count(case when substring(REG_DT, 6, 2)=4 then 1 end)as Api,
count(case when substring(REG_DT, 6, 2)=5 then 1 end)as May,
count(case when substring(REG_DT, 6, 2)=6 then 1 end)as Jun,
count(case when substring(REG_DT, 6, 2)=7 then 1 end)as Jul,
count(case when substring(REG_DT, 6, 2)=8 then 1 end)as Aug,
count(case when substring(REG_DT, 6, 2)=9 then 1 end)as Sep,
count(case when substring(REG_DT, 6, 2)=10 then 1 end)as Oct,
count(case when substring(REG_DT, 6, 2)=11 then 1 end)as Nov,
count(case when substring(REG_DT, 6, 2)=12 then 1 end)as DecA,
COUNT(CASE WHEN GENDER = 'F' THEN 1 END) AS FEMALE,
COUNT(CASE WHEN GENDER = 'M' THEN 1 END) AS MALE,
count(1) as allUsers,
count(case when INCOME='100'and GENDER='F' then 1 end) as oneF,
count(case when INCOME='100'and GENDER='M' then 1 end) as oneM,
count(case when INCOME='100' then 1 end) as oneA,
count(case when INCOME='200'and GENDER='F' then 1 end) as twoF,
count(case when INCOME='200'and GENDER='M' then 1 end) as twoM,
count(case when INCOME='200' then 1 end) as twoA,
count(case when INCOME='300'and GENDER='F' then 1 end) as threeF,
count(case when INCOME='300'and GENDER='M' then 1 end) as threeM,
count(case when INCOME='300' then 1 end) as threeA,
count(case when INCOME='400'and GENDER='F' then 1 end) as fourF,
count(case when INCOME='400'and GENDER='M' then 1 end) as fourM,
count(case when INCOME='400' then 1 end) as fourA,
count(case when INCOME='500'and GENDER='F' then 1 end) as fiveF,
count(case when INCOME='500'and GENDER='M' then 1 end) as fiveM,
count(case when INCOME='500' then 1 end) as fiveA,
count(case when INCOME='600'and GENDER='F' then 1 end) as sixF,
count(case when INCOME='600'and GENDER='M' then 1 end) as sixM,
count(case when INCOME='600' then 1 end) as sixA,
count(case when INCOME='700'and GENDER='F' then 1 end) as sevF,
count(case when INCOME='700'and GENDER='M' then 1 end) as sevM,
count(case when INCOME='700' then 1 end) as sevA,
count(case when a.job='build' then 1 end) as build,
count(case when a.job='design' then 1 end) as design,
count(case when a.job='education' then 1 end) as education,
count(case when a.job='it' then 1 end) as it,
count(case when a.job='management' then 1 end) as management,
count(case when a.job='manufacture' then 1 end) as manufacture,
count(case when a.job='medical' then 1 end) as medical,
count(case when a.job='pro' then 1 end) as pro,
count(case when a.job='sales' then 1 end) as sales,
count(case when a.job='service' then 1 end) as service,
count(case when a.job='student' then 1 end) as student,
count(case when a.job='trade' then 1 end) as trade
from aws.USER_INFO a
</select>

<select id="myExpenseMonth">
select
sum(case when substring(EXPENSE_DATE,6,2)=6 and EXPENSE_CATEGORY='foods'
	then cast(EXPENSE_CASH as decimal) end) as foods,
sum(case when substring(EXPENSE_DATE,6,2)=6 and EXPENSE_CATEGORY='alcohol_cigarette'
	then cast(EXPENSE_CASH as decimal) end) as alcohol_cigarette,
sum(case when substring(EXPENSE_DATE,6,2)=6 and EXPENSE_CATEGORY='clothes'
	then cast(EXPENSE_CASH as decimal) end) as clothes,	
sum(case when substring(EXPENSE_DATE,6,2)=6 and EXPENSE_CATEGORY='utility_bill'
	then cast(EXPENSE_CASH as decimal) end) as utility_bill,
sum(case when substring(EXPENSE_DATE,6,2)=6 and EXPENSE_CATEGORY='housewares'
	then cast(EXPENSE_CASH as decimal) end) as housewares,
sum(case when substring(EXPENSE_DATE,6,2)=6 and EXPENSE_CATEGORY='health'
	then cast(EXPENSE_CASH as decimal) end) as health,
sum(case when substring(EXPENSE_DATE,6,2)=6 and EXPENSE_CATEGORY='transportation'
	then cast(EXPENSE_CASH as decimal) end) as transportation,
sum(case when substring(EXPENSE_DATE,6,2)=6 and EXPENSE_CATEGORY='telephone'
	then cast(EXPENSE_CASH as decimal) end) as telephone,
sum(case when substring(EXPENSE_DATE,6,2)=6 and EXPENSE_CATEGORY='entertainment'
	then cast(EXPENSE_CASH as decimal) end) as entertainment,
sum(case when substring(EXPENSE_DATE,6,2)=6 and EXPENSE_CATEGORY='education'
	then cast(EXPENSE_CASH as decimal) end) as education,
sum(case when substring(EXPENSE_DATE,6,2)=6 and EXPENSE_CATEGORY='travel'
	then cast(EXPENSE_CASH as decimal) end) as travel,
sum(case when substring(EXPENSE_DATE,6,2)=6 and EXPENSE_CATEGORY='etc'
	then cast(EXPENSE_CASH as decimal) end) as etc
from aws.POCKET_INFO
</select>

<select id="dataForStoreInfo" resultType="java.util.HashMap">
select
count(case when CATEGORY='음식' then 1 end) as restaurant,
count(case when CATEGORY='생활서비스' then 1 end) as life,
count(case when CATEGORY='소매' then 1 end) as sales,
count(case when CATEGORY='학문/교육' then 1 end) as edu,
count(case when CATEGORY='관광/여가/오락' then 1 end) as entertainment,
count(case when CATEGORY='의료' then 1 end) as medi,
count(case when CATEGORY='부동산' then 1 end) as budong,
count(case when CATEGORY='숙박' then 1 end) as accom,
count(case when GUNAME='강남구' then 1 end) as gangnam,
count(case when GUNAME='금천구' then 1 end) as gemcheon,
count(case when GUNAME='송파구' then 1 end) as songpa,
count(case when GUNAME='강서구' then 1 end) as gangseo,
count(case when GUNAME='중구' then 1 end) as jungu,
count(case when GUNAME='양천구' then 1 end) as yangcheon,
count(case when GUNAME='서대문구' then 1 end) as seodae,
count(case when GUNAME='광진구' then 1 end) as gwangjin,
count(case when GUNAME='영등포구' then 1 end) as youngdeng,
count(case when GUNAME='서초구' then 1 end) as seocho,
count(case when GUNAME='성북구' then 1 end) as seongbuk,
count(case when GUNAME='구로구' then 1 end) as guro,
count(case when GUNAME='관악구' then 1 end) as gwanak,
count(case when GUNAME='마포구' then 1 end) as mapo,
count(case when GUNAME='성동구' then 1 end) as seongdong,
count(case when GUNAME='노원구' then 1 end) as nowon,
count(case when GUNAME='동작구' then 1 end) as dongjak,
count(case when GUNAME='종로구' then 1 end) as jongno,
count(case when GUNAME='용산구' then 1 end) as yongsan,
count(case when GUNAME='강북구' then 1 end) as gangbuk,
count(case when GUNAME='강동구' then 1 end) as gangdong,
count(case when GUNAME='중랑구' then 1 end) as junrang,
count(case when GUNAME='동대문구' then 1 end) as dongdae,
count(case when GUNAME='도봉구' then 1 end) as dobong,
count(case when substring(REG_DATE,6,2)=1 then 1 end) as jan,
count(case when substring(REG_DATE,6,2)=2 then 1 end) as fab,
count(case when substring(REG_DATE,6,2)=3 then 1 end) as mar,
count(case when substring(REG_DATE,6,2)=4 then 1 end) as api,
count(case when substring(REG_DATE,6,2)=5 then 1 end) as may,
count(case when substring(REG_DATE,6,2)=6 then 1 end) as jun,
count(case when substring(REG_DATE,6,2)=7 then 1 end) as july,
count(case when substring(REG_DATE,6,2)=8 then 1 end) as aug
from aws.STORE_INFO
</select>

<select id="storeLocalData" resultType="java.util.HashMap">
select
count(case when GUNAME='강남구' then 1 end) as gangnam,
count(case when GUNAME='금천구' then 1 end) as gemcheon,
count(case when GUNAME='송파구' then 1 end) as songpa,
count(case when GUNAME='강서구' then 1 end) as gangseo,
count(case when GUNAME='중구' then 1 end) as jungu,
count(case when GUNAME='양천구' then 1 end) as yangcheon,
count(case when GUNAME='서대문구' then 1 end) as seodae,
count(case when GUNAME='광진구' then 1 end) as gwangjin,
count(case when GUNAME='영등포구' then 1 end) as youngdeng,
count(case when GUNAME='서초구' then 1 end) as seocho,
count(case when GUNAME='성북구' then 1 end) as seongbuk,
count(case when GUNAME='구로구' then 1 end) as guro,
count(case when GUNAME='관악구' then 1 end) as gwanak,
count(case when GUNAME='마포구' then 1 end) as mapo,
count(case when GUNAME='성동구' then 1 end) as seongdong,
count(case when GUNAME='노원구' then 1 end) as nowon,
count(case when GUNAME='동작구' then 1 end) as dongjak,
count(case when GUNAME='종로구' then 1 end) as jongno,
count(case when GUNAME='용산구' then 1 end) as yongsan,
count(case when GUNAME='강북구' then 1 end) as gangbuk,
count(case when GUNAME='강동구' then 1 end) as gangdong,
count(case when GUNAME='중랑구' then 1 end) as junrang,
count(case when GUNAME='동대문구' then 1 end) as dongdae,
count(case when GUNAME='도봉구' then 1 end) as dobong
from aws.STORE_INFO
</select>


<select id="expenseUserData" parameterType="String" resultType="java.util.HashMap">
select
sum(case when substring(EXPENSE_DATE,6,2)=1 
	then cast(EXPENSE_CASH as decimal) end) as jan,
sum(case when substring(EXPENSE_DATE,6,2)=2
	then cast(EXPENSE_CASH as decimal) end) as feb,
sum(case when substring(EXPENSE_DATE,6,2)=3 
	then cast(EXPENSE_CASH as decimal) end) as mar,
sum(case when substring(EXPENSE_DATE,6,2)=4 
	then cast(EXPENSE_CASH as decimal) end) as api,
sum(case when substring(EXPENSE_DATE,6,2)=5
	then cast(EXPENSE_CASH as decimal) end) as may,
sum(case when substring(EXPENSE_DATE,6,2)=6 
	then cast(EXPENSE_CASH as decimal) end) as jun,
sum(case when EXPENSE_DATE between '2018-06-01' and '2018-06-02' 
	then cast(EXPENSE_CASH as decimal) end) as first,
sum(case when EXPENSE_DATE between '2018-06-03' and '2018-06-09' 
	then cast(EXPENSE_CASH as decimal) end) as second,
sum(case when EXPENSE_DATE between '2018-06-10' and '2018-06-16' 
	then cast(EXPENSE_CASH as decimal) end) as third,
sum(case when EXPENSE_DATE between '2018-06-17' and '2018-06-23' 
	then cast(EXPENSE_CASH as decimal) end) as forth,
sum(case when EXPENSE_DATE between '2018-06-24' and '2018-06-30' 
	then cast(EXPENSE_CASH as decimal) end) as fifth,
sum(case when EXPENSE_CATEGORY ='foods' then cast(EXPENSE_CASH as decimal)end) as foods,
sum(case when EXPENSE_CATEGORY ='alcohol_cigarette' then cast(EXPENSE_CASH as decimal)end) as alcohol_cigarette,
sum(case when EXPENSE_CATEGORY ='clothes' then cast(EXPENSE_CASH as decimal)end) as clothes,
sum(case when EXPENSE_CATEGORY ='utility_bill' then cast(EXPENSE_CASH as decimal)end) as utility_bill,
sum(case when EXPENSE_CATEGORY ='housewares' then cast(EXPENSE_CASH as decimal)end) as housewares,
sum(case when EXPENSE_CATEGORY ='health' then cast(EXPENSE_CASH as decimal)end) as health,
sum(case when EXPENSE_CATEGORY ='transportation' then cast(EXPENSE_CASH as decimal)end) as transportation,
sum(case when EXPENSE_CATEGORY ='telephone' then cast(EXPENSE_CASH as decimal)end) as telephone,
sum(case when EXPENSE_CATEGORY ='entertainment' then cast(EXPENSE_CASH as decimal)end) as entertainment,
sum(case when EXPENSE_CATEGORY ='education' then cast(EXPENSE_CASH as decimal)end) as education,
sum(case when EXPENSE_CATEGORY ='travel' then cast(EXPENSE_CASH as decimal)end) as travel

from aws.POCKET_INFO
where USER_NO=#{user_no}

</select>
</mapper>